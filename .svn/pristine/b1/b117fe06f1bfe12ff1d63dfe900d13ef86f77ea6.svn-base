<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <permission>hudson.model.Item.Cancel:anonymous</permission>
      <permission>hudson.model.Item.Read:anonymous</permission>
      <permission>hudson.model.Item.Workspace:anonymous</permission>
      <permission>hudson.model.Item.Build:anonymous</permission>
      <permission>hudson.model.Run.Replay:anonymous</permission>
      <permission>hudson.model.Item.ViewStatus:anonymous</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <org.datadog.jenkins.plugins.datadog.DatadogJobProperty plugin="datadog@0.5.6">
      <emitOnCheckout>false</emitOnCheckout>
    </org.datadog.jenkins.plugins.datadog.DatadogJobProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.26.1">
      <projectUrl>https://github.com/smartdevicelink/sdl_atf/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>SDL_BUILD</name>
          <description></description>
          <defaultValue>65</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>TEST_SET</name>
          <description></description>
          <defaultValue>policies_smoke.txt</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description></description>
          <defaultValue>feature/extended_policy_functionality</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>REPOSITORY</name>
          <description></description>
          <defaultValue>https://github.com/smartdevicelink/sdl_atf_test_scripts</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>ATF_REVISION</name>
          <description></description>
          <defaultValue>develop</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@1.9.0">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>3</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>true</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/smartdevicelink/sdl_atf</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>${ATF_REVISION}</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>Slave1</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
ifconfig
echo ${WORKSPACE}
sudo apt-get -y install sqlite
git submodule init
git submodule update
sed -i &apos;/config.color = true/c\config.color = false&apos; ./modules/config.lua
make


cat ./modules/config.lua
wget http://172.30.23.4:8081/artifactory/Utils/SDL_environment_setup.sh
sudo chmod +x SDL_environment_setup.sh
sudo chmod 777 SDL_environment_setup.sh

echo &quot;Script started&quot;

seconds2time ()
{
   T=$1
   D=$((T/60/60/24))
   H=$((T/60/60%24))
   M=$((T/60%60))
   S=$((T%60))

   if [[ ${D} != 0 ]]
   then
      printf &apos;%d days %02d:%02d:%02d&apos; $D $H $M $S
   else
      printf &apos;%02d:%02d:%02d&apos; $H $M $S
   fi
}

mkdir aut
cd aut
wget http://172.30.23.4:8081/artifactory/OpenSDL_Demand/${SDL_BUILD}/OpenSDL.tar.gz

#if [ &quot;$POLICY&quot; == &quot;HTTP&quot; ]; then
#	TEST_SET=&quot;policies_happy_paths_HTTP.txt&quot;
#fi
#if [ &quot;$POLICY&quot; == &quot;EXTENDED&quot; ]; then
#	TEST_SET=&quot;policies_happy_paths_EXTERNAL_PROPRIETARY.txt&quot;
#fi
#if [ &quot;$POLICY&quot; == &quot;PROPRIETARY&quot; ]; then
#	TEST_SET=&quot;policies_happy_paths_PROPRIETARY.txt&quot;
#fi

tar -xvf OpenSDL.tar.gz
cd bin
pwd
export LD_LIBRARY_PATH=.
sudo ldconfig
cd ../..
git clone ${REPOSITORY}
cd sdl_atf_test_scripts
git checkout ${BRANCH}
cd ..
ls -l
cp -r ${WORKSPACE}/sdl_atf_test_scripts/. ${WORKSPACE}/
pwd
cp -rf ${WORKSPACE}/aut/bin/api/. ${WORKSPACE}/data/
ls -l data/


#mkdir tmp

#cp ./test_scripts/Polices/Policies_Security/002_ATF_P_Policies_Performance_Requirement.lua tmp/002_ATF_P_Policies_Performance_Requirement.lua
#cp ./test_scripts/Polices/build_options/ATF_PM_change_status_UPDATE_NEEDED_after_timeout_expired.lua tmp/ATF_PM_change_status_UPDATE_NEEDED_after_timeout_expired.lua
#cp ./test_scripts/Polices/build_options/011_ATF_P_TC_PTS_Define_URL_to_send_PTS_HTTP.lua tmp/011_ATF_P_TC_PTS_Define_URL_to_send_PTS_HTTP.lua

echo &quot;Backup SDL&quot;
#Backup
./SDL_environment_setup.sh -b ${WORKSPACE}/aut/bin
echo &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;ATF On Demand Report - Build#${BUILD_NUMBER}&lt;/title&gt;&lt;/head&gt;&quot; &gt;&gt; atf_report.html

echo &quot;&lt;script src=&apos;https://code.jquery.com/jquery-3.1.1.min.js&apos; integrity=&apos;sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8=&apos; crossorigin=&apos;anonymous&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://code.jquery.com/ui/1.12.0/jquery-ui.min.js&apos; integrity=&apos;sha256-eGE6blurk5sHj+rmkfsGYeKyZx3M4bG+ZlFyA7Kns7E=&apos; crossorigin=&apos;anonymous&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;link href=&apos;https://cdn.datatables.net/1.10.13/css/jquery.dataTables.min.css&apos; rel=&apos;stylesheet&apos;&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;link href=&apos;https://cdn.datatables.net/buttons/1.2.4/css/buttons.dataTables.min.css&apos; rel=&apos;stylesheet&apos;&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;link href=&apos;https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.0.0-alpha.5/css/bootstrap.css&apos; rel=&apos;stylesheet&apos;&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdn.datatables.net/1.10.13/js/jquery.dataTables.min.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdn.datatables.net/buttons/1.2.4/js/dataTables.buttons.min.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdnjs.cloudflare.com/ajax/libs/jszip/2.5.0/jszip.min.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/pdfmake.min.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdn.rawgit.com/bpampuch/pdfmake/0.1.18/build/vfs_fonts.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdn.datatables.net/buttons/1.2.4/js/buttons.html5.min.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;script src=&apos;https://cdn.datatables.net/1.10.13/js/dataTables.bootstrap4.min.js&apos;&gt;&lt;/script&gt;&quot; &gt;&gt; atf_report.html


echo &quot;&lt;script&gt; \$(document).ready(function() {\$(&apos;#example&apos;).DataTable({paging: false, bSortClasses : false, dom: &apos;Bfrtip&apos;, buttons: [&apos;copyHtml5&apos;, &apos;excelHtml5&apos;, &apos;csvHtml5&apos;, &apos;pdfHtml5&apos;]});} );&lt;/script&gt;&quot; &gt;&gt; atf_report.html

echo &quot;&lt;h3&gt;&lt;a href=&apos;${BUILD_URL}&apos;&gt;${JOB_NAME}&lt;/a&gt;&lt;/h3&gt;&lt;br&gt;&quot; &gt;&gt; atf_report.html
echo &quot;Detailed regression report - &lt;a href=&apos;${BUILD_URL}/testReport/(root)/lua/&apos;&gt;Tests Run Details&lt;/a&gt;&lt;br&gt;&lt;br&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;table border=&apos;1&apos; id=&quot;example&quot; class=&apos;table table-striped table-bordered display compact stripe hover&apos; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Test name&lt;/th&gt;&lt;th&gt;Test Result&lt;/th&gt;&lt;th&gt;Execution time.&lt;/th&gt;&lt;th&gt;Jira Issue&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;testsuites&gt;&quot; &gt;&gt; junit.xml
total_time=0;
pased_tests=0;
failed_tests=0;
echo &quot;&lt;testsuite name=&apos;ALL TESTS_${POLICY}&apos;&gt;&quot; &gt;&gt; junit.xml
#for i in $(find ./tmp/ -type f -name &quot;*.lua&quot;);
touch failed_tests.txt;
touch success_tests.txt;

echo &quot;$(cat ./test_sets/$TEST_SET)&quot;;
while read -r i
do
 if [[ $i != &quot;;&quot;* ]]; then
 echo &quot;Jira = &quot; $i | awk &apos;{print $2}&apos;;
 test_script=$(echo $i | awk &apos;{print $1}&apos;)
 echo &quot;Script = &quot;$test_script
 start=$SECONDS;
 ps -aux | grep smartDeviceLinkCore | awk &apos;{print $2}&apos; | xargs kill -9;
 sudo ./start.sh --sdl-core=${WORKSPACE}/aut/bin $test_script | tee console.log ; result=${PIPESTATUS[0]};
 if [ $result -eq 0 ]; then
  	stop=$SECONDS;
 	(( runtime=stop-start ));
 	(( total_time=total_time+runtime ));
	(( pased_tests=pased_tests+1 ))
 	echo &quot;Test passed&quot;;
    echo &quot;&lt;tr&gt; &lt;td&gt;$test_script&lt;/td&gt;&lt;td bgcolor=&apos;green&apos;&gt;Passed&lt;/td&gt;&lt;td&gt;$runtime&lt;/td&gt;&lt;td&gt;&lt;a href=&apos;https://adc.luxoft.com/jira/browse/$(echo $i | awk &apos;{print $2}&apos;)&apos;&gt;$(echo $i | awk &apos;{print $2}&apos;)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot; &gt;&gt; atf_report.html;
    echo &quot;&lt;testcase name=&apos;$(basename $test_script .lua)&apos; classname=&apos;lua&apos; time=&apos;$runtime&apos; /&gt;&quot; &gt;&gt; junit.xml;
 fi
 if [ $result -eq 1 ]; then
 	stop=$SECONDS;
 	(( runtime=stop-start ));
 	(( total_time=total_time+runtime ));
	(( failed_tests=failed_tests+1 ))
 	echo &quot;&lt;tr&gt; &lt;td&gt;$test_script&lt;/td&gt;&lt;td bgcolor=&apos;orange&apos;&gt;Aborted&lt;/td&gt;&lt;td&gt;$runtime&lt;/td&gt;&lt;td&gt;&lt;a href=&apos;https://adc.luxoft.com/jira/browse/$(echo $i | awk &apos;{print $2}&apos;)&apos;&gt;$(echo $i | awk &apos;{print $2}&apos;)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot; &gt;&gt; atf_report.html;
	ERROR=$(cat ErrorLog.txt);
    echo &quot;&lt;testcase name=&apos;$(basename $test_script .lua)&apos; classname=&apos;lua&apos; time=&apos;$runtime&apos;&gt;&quot; &gt;&gt; junit.xml;
   	echo &quot;&lt;failure message=&apos;Something goes wrong&apos;&gt;$ERROR&lt;/failure&gt;&quot; &gt;&gt; junit.xml;
    echo &quot;&lt;/testcase&gt;&quot; &gt;&gt; junit.xml
    echo &quot;Test aborted with exit code = $result!&quot;;
	echo &quot;$(basename $test_script .lua)&quot; &gt;&gt; failed_tests.txt;
    failed=1;
 fi
 if [ $result -eq 2 ]; then
 	stop=$SECONDS;
 	(( runtime=stop-start ));
 	(( total_time=total_time+runtime ));
	(( failed_tests=failed_tests+1 ))
	ERROR=$(cat ErrorLog.txt);
 	echo &quot;&lt;tr&gt; &lt;td&gt;$test_script&lt;/td&gt;&lt;td bgcolor=&apos;red&apos;&gt;Failed&lt;/td&gt;&lt;td&gt;$runtime&lt;/td&gt;&lt;td&gt;&lt;a href=&apos;https://adc.luxoft.com/jira/browse/$(echo $i | awk &apos;{print $2}&apos;)&apos;&gt;$(echo $i | awk &apos;{print $2}&apos;)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot; &gt;&gt; atf_report.html;
    echo &quot;&lt;testcase name=&apos;$(basename $test_script .lua)&apos; classname=&apos;lua&apos; time=&apos;$runtime&apos;&gt;&quot; &gt;&gt; junit.xml;
   	echo &quot;&lt;failure message=&apos;Something goes wrong&apos;&gt;$ERROR&lt;/failure&gt;&quot; &gt;&gt; junit.xml;
    echo &quot;&lt;/testcase&gt;&quot; &gt;&gt; junit.xml
    echo &quot;Test failed with exit code = $result!&quot;;
	echo &quot;$(basename $test_script .lua)&quot; &gt;&gt; failed_tests.txt;
    failed=1;
 fi
 echo &quot;Test finished!&quot;;
 cp ErrorLog.txt ErrorLog-$(basename $test_script .lua).txt
 cp aut/bin/SmartDeviceLinkCore.log ${WORKSPACE}/SDL_Log_$(basename $test_script .lua).txt
 rm -rf aut/bin/smartDeviceLinkCore.log
 ps -aux | grep smartDeviceLinkCore | awk &apos;{print $2}&apos; | xargs kill -9;
 echo &quot;Clean SDL&quot;
 #Clean
 sudo ./SDL_environment_setup.sh -c ${WORKSPACE}/aut/bin
 echo &quot;Restore SDL&quot;
 #Restore
 sudo ./SDL_environment_setup.sh -r ${WORKSPACE}/aut/bin
 else
  echo &quot;Test skipped - $i&quot;
  echo &quot;&lt;tr&gt; &lt;td&gt;$test_script&lt;/td&gt;&lt;td bgcolor=&apos;yellow&apos;&gt;Skipped&lt;/td&gt;&lt;td&gt;$runtime&lt;/td&gt;&lt;td&gt;&lt;a href=&apos;https://adc.luxoft.com/jira/browse/$(echo $i | awk &apos;{print $2}&apos;)&apos;&gt;$(echo $i | awk -F, &apos;{print $2}&apos;)&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot; &gt;&gt; atf_report.html;
  echo &quot;&lt;testcase name=&apos;$(basename $i .lua)&apos; classname=&apos;lua&apos; time=&apos;$runtime&apos;&gt;&quot; &gt;&gt; junit.xml;
  echo &quot;&lt;skipped /&gt;&lt;/testcase&gt;&quot; &gt;&gt; junit.xml
  echo &quot;Test failed with exit code = $result!&quot;;
  echo &quot;$(basename $i .lua)&quot; &gt;&gt; skipped_tests.txt;  
fi
done &lt; ./test_sets/$TEST_SET
echo &quot;&lt;/table&gt;&lt;br&gt;Total time: $(seconds2time $total_time)&quot; &gt;&gt; atf_report.html
echo &quot;&lt;/br&gt;Passed=${pased_tests}, Failed=${failed_tests}&lt;/html&gt;&quot; &gt;&gt; atf_report.html
echo &quot;&lt;/testsuite&gt;&quot; &gt;&gt; junit.xml
echo &quot;&lt;/testsuites&gt;&quot; &gt;&gt; junit.xml

tar -zcvf SDL_Logs.tar.gz ${WORKSPACE}/SDL_Log_*.txt
tar -zcvf TestingReports.tar.gz TestingReports/
tar -zcvf ErrorLogs.tar.gz ErrorLog-*.txt

echo &quot;Script ended&quot;
echo &quot;{ATF_PASSED:${pased_tests} }&quot;
echo &quot;{ATF_FAILED:${failed_tests} }&quot;
echo &quot;{ATF_TOTAL:$(( pased_tests+failed_tests )) }&quot;

wget -O old_failed_tests.txt ${JOB_URL}lastCompletedBuild/artifact/failed_tests.txt
wget -O old_success_tests.txt ${JOB_URL}lastCompletedBuild/artifact/success_tests.txt

if [ -f old_failed_tests.txt ]; then
	if [ -f old_success_tests.txt ]; then
		awk &apos;{if (f==1) { r[$0] } else if (! ($0 in r)) { print $0 } } &apos; f=1 old_failed_tests.txt f=2 failed_tests.txt &gt;&gt; new_failures.txt
		awk &apos;{if (f==1) { r[$0] } else if (! ($0 in r)) { print $0 } } &apos; f=1 old_success_tests.txt f=2 success_tests.txt &gt;&gt; new_success.txt
	fi
fi


NUMOFFAILURES=$(cat new_failures.txt | wc -l )
NUMOFSUCCESS=$(cat new_success.txt | wc -l )


if [ $failed -ne 0 ]; then
 exit 1
fi


</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>atf_report.html, TestingReports.tar.gz, junit.xml, ErrorLogs.tar.gz, SDL_Logs.tar.gz, failed_tests.txt, success_tests.txt</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
      <caseSensitive>true</caseSensitive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.junit.JUnitResultArchiver plugin="junit@1.20">
      <testResults>junit.xml</testResults>
      <keepLongStdio>false</keepLongStdio>
      <healthScaleFactor>1.0</healthScaleFactor>
      <allowEmptyResults>false</allowEmptyResults>
    </hudson.tasks.junit.JUnitResultArchiver>
    <hudson.plugins.ws__cleanup.WsCleanup plugin="ws-cleanup@0.32">
      <patterns class="empty-list"/>
      <deleteDirs>false</deleteDirs>
      <skipWhenFailed>false</skipWhenFailed>
      <cleanWhenSuccess>true</cleanWhenSuccess>
      <cleanWhenUnstable>true</cleanWhenUnstable>
      <cleanWhenFailure>true</cleanWhenFailure>
      <cleanWhenNotBuilt>true</cleanWhenNotBuilt>
      <cleanWhenAborted>true</cleanWhenAborted>
      <notFailBuild>false</notFailBuild>
      <cleanupMatrixParent>false</cleanupMatrixParent>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.WsCleanup>
  </publishers>
  <buildWrappers>
    <hudson.plugins.ws__cleanup.PreBuildCleanup plugin="ws-cleanup@0.32">
      <deleteDirs>false</deleteDirs>
      <cleanupParameter></cleanupParameter>
      <externalDelete></externalDelete>
    </hudson.plugins.ws__cleanup.PreBuildCleanup>
    <hudson.plugins.build__timeout.BuildTimeoutWrapper plugin="build-timeout@1.18">
      <strategy class="hudson.plugins.build_timeout.impl.AbsoluteTimeOutStrategy">
        <timeoutMinutes>240</timeoutMinutes>
      </strategy>
      <operationList>
        <hudson.plugins.build__timeout.operations.FailOperation/>
      </operationList>
    </hudson.plugins.build__timeout.BuildTimeoutWrapper>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.8.8"/>
    <EnvInjectBuildWrapper plugin="envinject@1.93.1">
      <info>
        <propertiesContent>QMAKE=/opt/qt53/bin/qmake</propertiesContent>
        <loadFilesFromMaster>false</loadFilesFromMaster>
      </info>
    </EnvInjectBuildWrapper>
  </buildWrappers>
</project>